// Generated by CoffeeScript 1.9.1
(function() {
  var VoiceCall, xml;

  xml = require('xml');

  VoiceCall = (function() {
    function VoiceCall(app, req) {
      this.app = app;
      this.id = this.get(req, 'CallSid');
      if (this.id == null) {
        this.id = 0;
      }
      this.from = this.get(req, 'From');
      this.to = this.get(req, 'To');
      this.direction = this.get(req, 'Direction');
      this.time_started = new Date();
      this.caller_id = this.get(req, 'CallerName');
      this.fromCity = this.get(req, 'FromCity');
      this.fromState = this.get(req, 'FromState');
      this.fromZip = this.get(req, 'FromZip');
      this.fromCountry = this.get(req, 'FromCountry');
      this.toCity = this.get(req, 'ToCity');
      this.toState = this.get(req, 'ToState');
      this.toZip = this.get(req, 'ToZip');
      this.toCountry = this.get(req, 'ToCountry');
    }

    VoiceCall.prototype.output = function(res, x) {
      var xres;
      xres = xml(x, {
        declaration: {
          encoding: 'UTF-8'
        }
      });
      res.set('Content-Type', 'text/xml');
      console.log(xres);
      return res.send(xres);
    };

    VoiceCall.prototype.get = function(req, value) {
      var ref, ref1;
      if (((ref = req.body) != null ? ref[value] : void 0) != null) {
        return req.body[value];
      }
      if (((ref1 = req.query) != null ? ref1[value] : void 0) != null) {
        return req.query[value];
      }
    };

    VoiceCall.prototype.update = function(req, res) {
      this.repeat = this.get(req, 'repeat');
      if (this.repeat == null) {
        this.repeat = 0;
      }
      this.recordingURL = this.get(req, 'RecordingUrl');
      this.recordingID = this.get(req, 'RecordingSid');
      this.recordingDuration = this.get(req, 'RecordingDuration');
      this.digits = this.get(req, 'Digits');
      this.status = this.get(req, 'CallStatus');
      this.duration = this.get(req, 'CallDuration');
      this.body = [];
      this.response = {
        Response: this.body
      };
      return this.res = res;
    };

    VoiceCall.prototype.acceptInput = function(maxDigits, target) {
      var gather, next;
      gather = [];
      gather._attr = {
        action: target,
        numDigits: maxDigits,
        timeout: this.app.settings.timeout
      };
      this.body.push({
        Gather: gather
      });
      next = parseInt(this.repeat) + 1;
      this.body.push({
        Say: this.app.settings.noInputMessage
      });
      this.body.push({
        Redirect: this.position + "?repeat=" + next
      });
      return this.body = gather;
    };

    VoiceCall.prototype.recordSound = function(target) {
      var next;
      this.body.push({
        Record: {
          _attr: {
            action: target,
            timeout: this.app.settings.timeout
          }
        }
      });
      next = parseInt(this.repeat) + 1;
      this.body.push({
        Say: this.app.settings.noInputMessage
      });
      this.body.push({
        Redirect: this.position + "?repeat=" + next
      });
      return this.go();
    };

    VoiceCall.prototype.say = function(text, voice) {
      if (!voice) {
        voice = this.app.settings.voice;
      }
      console.log(voice);
      return this.body.push({
        Say: text,
        _attr: {
          voice: voice
        }
      });
    };

    VoiceCall.prototype.play = function(url) {
      return this.body.push({
        Play: url
      });
    };

    VoiceCall.prototype.go = function() {
      return this.output(this.res, this.response);
    };

    VoiceCall.prototype.goTo = function(target) {
      this.body.push({
        Redirect: target
      });
      return this.go();
    };

    VoiceCall.prototype.goto = function(target) {
      return this.goTo(target);
    };

    VoiceCall.prototype.hangup = function() {
      this.body.push({
        Hangup: ''
      });
      return this.go();
    };

    return VoiceCall;

  })();

  module.exports = VoiceCall;

}).call(this);

//# sourceMappingURL=voice-call.js.map
